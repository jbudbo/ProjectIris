version: '3.8'

services:

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        networks:
            - Iris
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

    control-center:
        image: confluentinc/cp-enterprise-control-center:latest
        networks:
            - Iris
        depends_on:
            - broker
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
            #CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            PORT: 9021      

    #schema-registry:
    #    image: confluentinc/cp-schema-registry:latest
    #    networks:
    #        - Iris
    #    depends_on:
    #      - broker
    #    environment:
    #      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    #      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092

    broker:
        image: confluentinc/cp-server:latest
        networks:
            - Iris
        depends_on:
            - zookeeper
        #ports:
        #    - "29092:29092"
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_JMX_PORT: 9101
          #KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
          CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
          CONFLUENT_METRICS_ENABLE: 'true'
          CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    #worker:
    #    image: ${DOCKER_REGISTRY-}worker
    #    build:
    #        context: .
    #        dockerfile: Worker/Dockerfile
    #    deploy:
    #        replicas: 1
    #    depends_on:
    #        redis:
    #            condition: service_healthy
    #    environment:
    #        IRIS_REDIS_HOST: "redis"
    #    networks:
    #        - Iris
    worker:
        image: ${DOCKER_REGISTRY-}worker
        build:
            context: QuarkusWorker/twitter-metric-aggregator
            dockerfile: src/main/docker/Dockerfile.jvm
        networks:
            - Iris
        depends_on:
            - broker
        environment:
            QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: broker:29092
            QUARKUS_KAFKA_STREAMS_SECURITY_PROTOCOL: PLAINTEXT
            TWEET_TOPIC: Tweets

    #https://github.com/dotnet/dotnet-monitor/tree/main/documentation
    #https://bartwullems.blogspot.com/2021/07/dotnet-monitorrun-as-sidecar-in.html
    monitor:
        image: mcr.microsoft.com/dotnet/monitor:6.2.0-alpine-amd64
        environment:
            DOTNETMONITOR_Urls: "http://+:5005"
            DOTNETMONITOR_DiagnosticPort__MaxConnections: 5
        command: --no-auth
        volumes:
            - DotnetDiag:/tmp
        networks:
            - Iris
        depends_on:
            - ingress
        ports:
            - 5005:5005

    ingress:
        image: ${DOCKER_REGISTRY-}ingress
        build:
            context: .
            dockerfile: Ingress/Dockerfile
        secrets:
            - twitter_bearer
        depends_on:
            - broker
        networks:
            - Iris
        volumes:
            - DotnetDiag:/tmp
        environment:
            TWITTER__Endpoint: "/2/tweets/sample/stream"
            TWITTER__Base: "https://api.twitter.com"
            IRIS__Sink: "Tweets"
            KAFKA__ClientId: "Ingress"
            KAFKA__GroupId: "Iris"
            KAFKA__BootstrapServers: "broker:29092"
            KAFKA__SecurityProtocol: "PlainText"

    #dashboard:
    #    image: ${DOCKER_REGISTRY-}dashboard
    #    build:
    #        context: .
    #        dockerfile: Dashboard/Dockerfile
    #    depends_on:
    #        redis:
    #            condition: service_healthy
    #    ports:
    #        - 8080:80
    #        - 8443:443
    #    environment:
    #        IRIS_REDIS_HOST: "redis"
    #    networks:
    #        - Iris
    
secrets:
    twitter_bearer:
        file: ./twitter.json

networks:
    Iris:
        name: Iris

volumes:
    DotnetDiag: